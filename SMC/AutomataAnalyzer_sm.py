# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : AutomataAnalyzer.sm

from SMC import statemap


class AutomataAnalyzerState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def Brace1S(self, fsm):
        self.Default(fsm)

    def Brace2S(self, fsm):
        self.Default(fsm)

    def CommaS(self, fsm):
        self.Default(fsm)

    def Digit(self, fsm, ch):
        self.Default(fsm)

    def EOS(self, fsm):
        self.Default(fsm)

    def EqualS(self, fsm):
        self.Default(fsm)

    def Letter(self, fsm, ch):
        self.Default(fsm)

    def MinusS(self, fsm):
        self.Default(fsm)

    def SpaceS(self, fsm):
        self.Default(fsm)

    def SqBracket1S(self, fsm):
        self.Default(fsm)

    def SqBracket2S(self, fsm):
        self.Default(fsm)

    def Start(self, fsm):
        self.Default(fsm)

    def Unknown(self, fsm):
        self.Default(fsm)

    def ZeroS(self, fsm, ch):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class MainMap_Default(AutomataAnalyzerState):

    def Start(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.ClearSMC()
        finally:
            fsm.setState(MainMap.Start)
            fsm.getState().Entry(fsm)


    def Letter(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def Digit(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def ZeroS(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def SqBracket1S(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def SqBracket2S(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def EqualS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def Brace1S(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def Brace2S(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def SpaceS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def MinusS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def CommaS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


class MainMap_Start(MainMap_Default):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def Letter(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.InsToBuf(ch)
        finally:
            fsm.setState(MainMap.Type)
            fsm.getState().Entry(fsm)


    def SpaceS(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Start)
        fsm.getState().Entry(fsm)


class MainMap_Space(MainMap_Default):

    def Letter(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.InsToBuf(ch)
            ctxt.IncLength()
        finally:
            fsm.setState(MainMap.Name)
            fsm.getState().Entry(fsm)


    def SpaceS(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Space)
        fsm.getState().Entry(fsm)


class MainMap_Type(MainMap_Default):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def Letter(self, fsm, ch):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.InsToBuf(ch)
        finally:
            fsm.setState(endState)


    def SpaceS(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.CheckType() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.InsType()
                ctxt.ClearBuf()
            finally:
                fsm.setState(MainMap.Space)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.SpaceS(self, fsm)
        
class MainMap_Name(MainMap_Default):

    def Digit(self, fsm, ch):
        ctxt = fsm.getOwner()
        if ctxt.LessThan16() :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.InsToBuf(ch)
                ctxt.IncLength()
            finally:
                fsm.setState(endState)
        else:
            MainMap_Default.Digit(self, fsm, ch)
        
    def Letter(self, fsm, ch):
        ctxt = fsm.getOwner()
        if ctxt.LessThan16() :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.InsToBuf(ch)
                ctxt.IncLength()
            finally:
                fsm.setState(endState)
        else:
            MainMap_Default.Letter(self, fsm, ch)
        
    def SqBracket1S(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.InsName()
            ctxt.ClearBuf()
            ctxt.ZeroLength()
        finally:
            fsm.setState(MainMap.SqBracket1)
            fsm.getState().Entry(fsm)


    def ZeroS(self, fsm, ch):
        ctxt = fsm.getOwner()
        if ctxt.LessThan16() :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.InsToBuf(ch)
                ctxt.IncLength()
            finally:
                fsm.setState(endState)
        else:
            MainMap_Default.ZeroS(self, fsm, ch)
        
class MainMap_SqBracket1(MainMap_Default):

    def Digit(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.InsToBuf(ch)
            ctxt.IncLength()
        finally:
            fsm.setState(MainMap.ElemNum)
            fsm.getState().Entry(fsm)


    def SqBracket2S(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.ZeroLength()
        finally:
            fsm.setState(MainMap.SqBracket2)
            fsm.getState().Entry(fsm)


    def ZeroS(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.InsToBuf(ch)
            ctxt.IncLength()
        finally:
            fsm.setState(MainMap.Zero)
            fsm.getState().Entry(fsm)


class MainMap_Zero(MainMap_Default):

    def Digit(self, fsm, ch):
        ctxt = fsm.getOwner()
        if ctxt.LessThan9() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.InsToBuf(ch)
                ctxt.IncLength()
            finally:
                fsm.setState(MainMap.ElemNum)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.Digit(self, fsm, ch)
        
    def ZeroS(self, fsm, ch):
        ctxt = fsm.getOwner()
        if ctxt.LessThan9() :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.InsToBuf(ch)
                ctxt.IncLength()
            finally:
                fsm.setState(endState)
        else:
            MainMap_Default.ZeroS(self, fsm, ch)
        
class MainMap_ElemNum(MainMap_Default):

    def Digit(self, fsm, ch):
        ctxt = fsm.getOwner()
        if ctxt.LessThan9() :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.InsToBuf(ch)
                ctxt.IncLength()
            finally:
                fsm.setState(endState)
        else:
            MainMap_Default.Digit(self, fsm, ch)
        
    def SqBracket2S(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.InsElemNum()
            ctxt.ClearBuf()
            ctxt.ZeroLength()
        finally:
            fsm.setState(MainMap.SqBracket2)
            fsm.getState().Entry(fsm)


    def ZeroS(self, fsm, ch):
        ctxt = fsm.getOwner()
        if ctxt.LessThan9() :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.InsToBuf(ch)
                ctxt.IncLength()
            finally:
                fsm.setState(endState)
        else:
            MainMap_Default.ZeroS(self, fsm, ch)
        
class MainMap_SqBracket2(MainMap_Default):

    def EqualS(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Equal)
        fsm.getState().Entry(fsm)


    def SpaceS(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.SqBracket2)
        fsm.getState().Entry(fsm)


class MainMap_Equal(MainMap_Default):

    def Brace1S(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Brace1)
        fsm.getState().Entry(fsm)


    def SpaceS(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Equal)
        fsm.getState().Entry(fsm)


class MainMap_Brace1(MainMap_Default):

    def Brace2S(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.CheckLength() :
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(MainMap.Brace2)
            fsm.getState().Entry(fsm)
        else:
            MainMap_Default.Brace2S(self, fsm)
        
    def Digit(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.IncLength()
        finally:
            fsm.setState(MainMap.Number)
            fsm.getState().Entry(fsm)


    def MinusS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.IncLength()
        finally:
            fsm.setState(MainMap.Number)
            fsm.getState().Entry(fsm)


    def SpaceS(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Brace1)
        fsm.getState().Entry(fsm)


    def ZeroS(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.IncLength()
        finally:
            fsm.setState(MainMap.Number)
            fsm.getState().Entry(fsm)


class MainMap_Number(MainMap_Default):

    def Brace2S(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.CheckLength() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.ZeroLength()
            finally:
                fsm.setState(MainMap.Brace2)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.Brace2S(self, fsm)
        
    def CommaS(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Comma)
        fsm.getState().Entry(fsm)


    def Digit(self, fsm, ch):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Number)
        fsm.getState().Entry(fsm)


    def ZeroS(self, fsm, ch):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Number)
        fsm.getState().Entry(fsm)


class MainMap_Comma(MainMap_Default):

    def Digit(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.IncLength()
        finally:
            fsm.setState(MainMap.Number)
            fsm.getState().Entry(fsm)


    def MinusS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.IncLength()
        finally:
            fsm.setState(MainMap.Number)
            fsm.getState().Entry(fsm)


    def SpaceS(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Comma)
        fsm.getState().Entry(fsm)


    def ZeroS(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.IncLength()
        finally:
            fsm.setState(MainMap.Number)
            fsm.getState().Entry(fsm)


class MainMap_Brace2(MainMap_Default):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Acceptable()
        finally:
            fsm.setState(MainMap.OK)
            fsm.getState().Entry(fsm)


    def SpaceS(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Brace2)
        fsm.getState().Entry(fsm)


class MainMap_Error(MainMap_Default):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(endState)


class MainMap_OK(MainMap_Default):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Acceptable()
        finally:
            fsm.setState(endState)


class MainMap(object):

    Start = MainMap_Start('MainMap.Start', 0)
    Space = MainMap_Space('MainMap.Space', 1)
    Type = MainMap_Type('MainMap.Type', 2)
    Name = MainMap_Name('MainMap.Name', 3)
    SqBracket1 = MainMap_SqBracket1('MainMap.SqBracket1', 4)
    Zero = MainMap_Zero('MainMap.Zero', 5)
    ElemNum = MainMap_ElemNum('MainMap.ElemNum', 6)
    SqBracket2 = MainMap_SqBracket2('MainMap.SqBracket2', 7)
    Equal = MainMap_Equal('MainMap.Equal', 8)
    Brace1 = MainMap_Brace1('MainMap.Brace1', 9)
    Number = MainMap_Number('MainMap.Number', 10)
    Comma = MainMap_Comma('MainMap.Comma', 11)
    Brace2 = MainMap_Brace2('MainMap.Brace2', 12)
    Error = MainMap_Error('MainMap.Error', 13)
    OK = MainMap_OK('MainMap.OK', 14)
    Default = MainMap_Default('MainMap.Default', -1)

class AutomataAnalyzer_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, MainMap.Start)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
